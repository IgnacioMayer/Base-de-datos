
TRIGGER 1: no permite que un agente realice/reciba mas de una llamada a la ves 

CREATE FUNCTION revisar_llamada()
RETURNS trigger 
AS $$ 
revisar = plpy.execute(''' 
     select count(*) cantidad_llamadas from llamada where fecha_inicio < '{}' and fecha_fin > '{}' and id_agente = {};'''.format(TD['new']['fecha_inicio'], TD['new']['fecha_inicio'], TD['new']['id_agente']))
if revisar[0][0] == 0:
     return 'OK'  
else:
     return 'SKIP' 
$$ LANGUAGE plpythonu;

CREATE trigger revisar_llamada BEFORE INSERT ON llamada FOR EACH ROW EXECUTE PROCEDURE revisar_llamada();


TRIGGER 2: no permite que una llamada sea evaluada mas de una vez

CREATE FUNCTION revisar_supervicion()
RETURNS trigger 
AS $$ 
	aprobacion = plpy.execute("SELECT aprobacion FROM llamada  WHERE id_llamada = {}".format(TD['new']['id_llamada']))
	if  TD['old']['aprobacion']== 0 or TD['old']['aprobacion'] == 1:
		return "SKIP"
	return "OK"
$$ LANGUAGE plpythonu;

CREATE TRIGGER revisar_supervicion BEFORE UPDATE ON llamada  
FOR EACH ROW EXECUTE PROCEDURE revisar_supervicion();


TRIGGER 3: No permitir que una llamada este asociada a mas de una campaña. 

Nuestro grupo no necesita hacer este trigger ya que de la forma en que diseñamos nuestra base de datos y como ingresamos los datos las llamadas solo pertenecen a una campaña ya que consideramos que una llamada se hace con un objetivo único y focalizado.


TRIGGER 5: no permite que una llamada nueva se asocie a una campaña expirada

CREATE FUNCTION r_campagna_llamada()
RETURNS trigger 
AS $$
revisar = plpy.execute(''' 
     SELECT count(*) campagna_validas
     FROM campagna
     WHERE id_campagna = {} AND inicio < CURRENT_DATE and fin > CURRENT_DATE;'''.format(TD['new']['id_campagna']))
if revisar[0][0] == 0:
     return 'SKIP' 
else:
     return 'OK' 
$$ LANGUAGE plpythonu;

CREATE trigger r_campagna_llamada BEFORE INSERT ON tipificacion_campagna FOR EACH ROW EXECUTE PROCEDURE r_campagna_llamada();


TRIGGER 6: no permite que una llamada nueva se inserte atrasada. 

CREATE FUNCTION r_fecha_llamada()
RETURNS trigger 
AS $$
from datetime import  datetime 
now = datetime.now()
date_time = now.strftime("%Y-%m-%d")	

if date_time == TD['new']['fecha_inicio']:
    RETURN 'OK'
else:
    RETURN 'SKIP'    

$$ LANGUAGE plpythonu;

CREATE trigger r_fecha_llamada BEFORE INSERT ON llamada FOR EACH ROW EXECUTE PROCEDURE r_fecha_llamada();




